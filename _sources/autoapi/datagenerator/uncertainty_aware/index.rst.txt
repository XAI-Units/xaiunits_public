datagenerator.uncertainty_aware
===============================

.. py:module:: datagenerator.uncertainty_aware


Attributes
----------

.. autoapisummary::

   datagenerator.uncertainty_aware.w


Classes
-------

.. autoapisummary::

   datagenerator.uncertainty_aware.UncertaintyAwareDataset


Module Contents
---------------

.. py:class:: UncertaintyAwareDataset(n_features: int = 5, weights: Optional[torch.Tensor] = None, common_features: int = 1, seed: int = 0, n_samples: int = 10, **kwargs: Any)

   Bases: :py:obj:`xaiunits.datagenerator.BaseFeaturesDataset`


   A dataset designed to investigate how feature attribution methods treat inputs
   features that equally impact model prediction.

   In particular, uncertainty/common features are input features that contribution equally
   to output class prediction. feature attribution method is expected not to assign any attribution
   score to these uncertainty inputs. The last columns of the dataset are uncertainty/common features.

   Users can also pass in their own weights if they wish to test for more complex uncertainty
   behavior, e.g. uncertainty/common feature only contribution equally to a subset of output classes.

   Inherits from:
       BaseFeaturesDataset: Base class for generating datasets with features and labels.

   .. attribute:: weighted_samples

      Samples multiplied by weights.

      :type: torch.Tensor

   .. attribute:: weights

      Weights matrix for feature transformation.

      :type: torch.Tensor

   .. attribute:: labels

      Softmax output of weighted samples.

      :type: torch.Tensor

   Initializes an UncertaintyAwareDataset object.

   :param n_features: Number of features in the dataset. Defaults to 5.
   :type n_features: int
   :param weights: Custom weights matrix for feature transformation. Defaults to None.
   :type weights: torch.Tensor, optional
   :param common_features: Number of uncertainty/common features present. Defaults to 1.
   :type common_features: int
   :param seed: Seed for random number generation. Defaults to 0.
   :type seed: int
   :param n_samples: Number of samples in the dataset. Defaults to 10.
   :type n_samples: int
   :param \*\*kwargs: Additional keyword arguments for the base class constructor.


   .. py:attribute:: common_features
      :value: 1



   .. py:attribute:: weighted_samples


   .. py:attribute:: weights


   .. py:attribute:: labels


   .. py:attribute:: mask


   .. py:attribute:: features
      :value: 'samples'



   .. py:attribute:: ground_truth_attribute
      :value: 'mask'



   .. py:attribute:: subset_data
      :value: ['samples', 'weighted_samples', 'mask']



   .. py:attribute:: subset_attribute


   .. py:method:: _create_weights(n_features: int, weights: Optional[torch.Tensor], common_features: int) -> torch.Tensor

      Creates weights matrix based on common features.

      :param n_features: Number of features in the dataset.
      :type n_features: int
      :param weights: Custom weights matrix for feature transformation.
      :type weights: torch.Tensor
      :param common_features: List of indices representing common features.
      :type common_features: list

      :returns: Weights matrix for feature transformation.
      :rtype: weights (torch.Tensor)



   .. py:method:: __getitem__(idx: int, others: list[str] = ['ground_truth_attribute']) -> Tuple[Any, Ellipsis]

      Retrieve a sample and its associated label by index.

      :param idx: Index of the sample to retrieve.
      :type idx: int
      :param others: Additional items to retrieve. Defaults to ["ground_truth_attribute"].
      :type others: list

      :returns: Tuple containing the sample and its label.
      :rtype: tuple



   .. py:method:: generate_model(softmax_layer: bool = True) -> torch.nn.Module

      Generates an UncertaintyNN model based on the dataset.

      :returns: Instance of UncertaintyNN model.
      :rtype: model.UncertaintyNN



   .. py:property:: default_metric
      :type: Callable


      The default metric for evaluating the performance of explanation methods applied
      to this dataset.

      For this dataset, the default metric is modified Mean Squared Error (MSE) loss function.
      This metric measures the MSE for common/uncertainty features which should be 0.

      :returns:

                A class that wraps around the default metric to be instantiated
                    within the pipeline.
      :rtype: type


.. py:data:: w
   :value: None


